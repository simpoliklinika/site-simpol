// src/app/components/StatsSection.tsx
"use client";

import { useEffect, useRef, useState } from "react";
import { fetchFromStrapi } from "@/utils/utils";

interface StatItem {
  label: string;
  value: number;
}

// –í—ñ–¥–ø–æ–≤—ñ–¥—å Strapi –¥–ª—è single-type "stat" (Strapi v5) –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–ª—è –±–µ–∑ –≤–∫–ª–∞–¥–µ–Ω–æ–≥–æ attributes
interface StatData {
  id: number;
  deps: number; // –í—ñ–¥–¥—ñ–ª–µ–Ω—å
  doctors: number; // –õ—ñ–∫–∞—Ä—ñ–≤
  vtruchan: number; // –•—ñ—Ä—É—Ä–≥—ñ—á–Ω–∏—Ö –≤—Ç—Ä—É—á–∞–Ω—å
  decl: number; // –î–µ–∫–ª–∞—Ä–∞—Ü—ñ–π
  dosl: number; // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å
  cons: number; // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
  // —ñ–Ω—à—ñ –º–µ—Ç–∞–ø–æ–ª—è –º–æ–∂–Ω–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
}

function useCountUp(target: number, duration = 2000, start = true) {
  const [count, setCount] = useState(0);
  const frame = useRef(0);

  useEffect(() => {
    if (!start) {
      setCount(0);
      return;
    }
    frame.current = 0;
    const totalFrames = Math.round((duration / 1000) * 60);
    const increment = target / totalFrames;

    function update() {
      frame.current++;
      const next = Math.min(Math.round(increment * frame.current), target);
      setCount(next);
      if (frame.current < totalFrames) {
        requestAnimationFrame(update);
      }
    }

    requestAnimationFrame(update);
    return () => {
      frame.current = totalFrames;
    };
  }, [target, duration, start]);

  return count;
}

function StatCard({ label, value, visible }: StatItem & { visible: boolean }) {
  const count = useCountUp(value, 2000, visible);
  return (
    <div className="text-center">
      <div className="text-5xl font-bold">{count.toLocaleString()}</div>
      <div className="mt-2 text-lg font-semibold">{label}</div>
    </div>
  );
}

export default function StatsSection() {
  const [stats, setStats] = useState<StatItem[] | null>(null);
  const ref = useRef<HTMLDivElement>(null);
  const [visible, setVisible] = useState(false);

  useEffect(() => {
    async function loadStats() {
      try {
        // –î–ª—è single-type "stat" —É Strapi v5 (flattened data)
        const resp = await fetchFromStrapi<{ data: StatData }>("stat", {
          populate: "*",
        });

        const data = resp?.data;
        console.log("üëç Strapi stat data:", data);
        if (!data) {
          console.warn("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
          setStats([]);
          return;
        }

        setStats([
          { label: "–í—ñ–¥–¥—ñ–ª–µ–Ω—å", value: data.deps },
          { label: "–õ—ñ–∫–∞—Ä—ñ–≤", value: data.doctors },
          { label: "–•—ñ—Ä—É—Ä–≥—ñ—á–Ω–∏—Ö –≤—Ç—Ä—É—á–∞–Ω—å", value: data.vtruchan },
          { label: "–î–µ–∫–ª–∞—Ä–∞—Ü—ñ–π", value: data.decl },
          { label: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å", value: data.dosl },
          { label: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π", value: data.cons },
        ]);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
        setStats([]);
      }
    }
    loadStats();
  }, []);

  useEffect(() => {
    if (!ref.current) return;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setVisible(true);
          observer.disconnect();
        }
      },
      { threshold: 0.3 }
    );
    observer.observe(ref.current);
    return () => observer.disconnect();
  }, []);

  return (
    <div ref={ref} className="py-16 bg-[#319c9c] text-white">
      {stats === null ? (
        <p className="text-center">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏‚Ä¶</p>
      ) : stats.length === 0 ? (
        <p className="text-center text-red-200">–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.</p>
      ) : (
        <>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-y-8 gap-x-4">
            {stats.map((stat, idx) => (
              <StatCard key={idx} {...stat} visible={visible} />
            ))}
          </div>
          <p className="mt-12 text-center text-lg max-w-3xl mx-auto">
            –ù–∞—à–∞ –º—ñ—Å—ñ—è ‚Äì —è–∫—ñ—Å–Ω–∞ —ñ –¥–æ—Å—Ç—É–ø–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω–∞, –¥–æ–∫–∞–∑–æ–≤—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Å—É—á–∞—Å–Ω–∏–π
            –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –±–µ–∑–ø–µ—á–Ω–∞ –ø—Ä–∞—Ü—è –º–µ–¥–∏–∫—ñ–≤.
          </p>
        </>
      )}
    </div>
  );
}
